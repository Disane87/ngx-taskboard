{
    "pipes": [],
    "interfaces": [
        {
            "name": "CardItem",
            "id": "interface-CardItem-f594df3432072eab5748f53d0a263398",
            "file": "src/lib/types.ts",
            "type": "interface",
            "sourceCode": "export interface CardItem {\r\n    id: number;\r\n    name: string;\r\n    status?: string;\r\n    color?: string;\r\n    user?: string;\r\n    priority?: number;\r\n}\r\n\r\n/**\r\n * All the collapse stated of every group item (horizontal / vertical)\r\n * \r\n * @export\r\n * @interface CollapseState\r\n */\r\nexport interface CollapseState {\r\n    name: string;\r\n    collapsed: boolean;\r\n}\r\n\r\n/**\r\n * Datatype which is emitted when an item should be added\r\n * \r\n * @export\r\n * @interface ClickEvent\r\n */\r\nexport interface ClickEvent {\r\n    hGroup: string;\r\n    vGroup: string;\r\n}\r\n\r\n/**\r\n * Group keys to determine the correct groups internally\r\n * \r\n * @export\r\n * @interface GroupKeys\r\n */\r\nexport interface GroupKeys {\r\n    hGroupKey: string;\r\n    vGroupKey: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "color",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "priority",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "user",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>Item to render</p>\n",
            "methods": []
        },
        {
            "name": "ClickEvent",
            "id": "interface-ClickEvent-f594df3432072eab5748f53d0a263398",
            "file": "src/lib/types.ts",
            "type": "interface",
            "sourceCode": "export interface CardItem {\r\n    id: number;\r\n    name: string;\r\n    status?: string;\r\n    color?: string;\r\n    user?: string;\r\n    priority?: number;\r\n}\r\n\r\n/**\r\n * All the collapse stated of every group item (horizontal / vertical)\r\n * \r\n * @export\r\n * @interface CollapseState\r\n */\r\nexport interface CollapseState {\r\n    name: string;\r\n    collapsed: boolean;\r\n}\r\n\r\n/**\r\n * Datatype which is emitted when an item should be added\r\n * \r\n * @export\r\n * @interface ClickEvent\r\n */\r\nexport interface ClickEvent {\r\n    hGroup: string;\r\n    vGroup: string;\r\n}\r\n\r\n/**\r\n * Group keys to determine the correct groups internally\r\n * \r\n * @export\r\n * @interface GroupKeys\r\n */\r\nexport interface GroupKeys {\r\n    hGroupKey: string;\r\n    vGroupKey: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "hGroup",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "vGroup",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>Datatype which is emitted when an item should be added</p>\n",
            "methods": []
        },
        {
            "name": "CollapseState",
            "id": "interface-CollapseState-f594df3432072eab5748f53d0a263398",
            "file": "src/lib/types.ts",
            "type": "interface",
            "sourceCode": "export interface CardItem {\r\n    id: number;\r\n    name: string;\r\n    status?: string;\r\n    color?: string;\r\n    user?: string;\r\n    priority?: number;\r\n}\r\n\r\n/**\r\n * All the collapse stated of every group item (horizontal / vertical)\r\n * \r\n * @export\r\n * @interface CollapseState\r\n */\r\nexport interface CollapseState {\r\n    name: string;\r\n    collapsed: boolean;\r\n}\r\n\r\n/**\r\n * Datatype which is emitted when an item should be added\r\n * \r\n * @export\r\n * @interface ClickEvent\r\n */\r\nexport interface ClickEvent {\r\n    hGroup: string;\r\n    vGroup: string;\r\n}\r\n\r\n/**\r\n * Group keys to determine the correct groups internally\r\n * \r\n * @export\r\n * @interface GroupKeys\r\n */\r\nexport interface GroupKeys {\r\n    hGroupKey: string;\r\n    vGroupKey: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "collapsed",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>All the collapse stated of every group item (horizontal / vertical)</p>\n",
            "methods": []
        },
        {
            "name": "GroupKeys",
            "id": "interface-GroupKeys-f594df3432072eab5748f53d0a263398",
            "file": "src/lib/types.ts",
            "type": "interface",
            "sourceCode": "export interface CardItem {\r\n    id: number;\r\n    name: string;\r\n    status?: string;\r\n    color?: string;\r\n    user?: string;\r\n    priority?: number;\r\n}\r\n\r\n/**\r\n * All the collapse stated of every group item (horizontal / vertical)\r\n * \r\n * @export\r\n * @interface CollapseState\r\n */\r\nexport interface CollapseState {\r\n    name: string;\r\n    collapsed: boolean;\r\n}\r\n\r\n/**\r\n * Datatype which is emitted when an item should be added\r\n * \r\n * @export\r\n * @interface ClickEvent\r\n */\r\nexport interface ClickEvent {\r\n    hGroup: string;\r\n    vGroup: string;\r\n}\r\n\r\n/**\r\n * Group keys to determine the correct groups internally\r\n * \r\n * @export\r\n * @interface GroupKeys\r\n */\r\nexport interface GroupKeys {\r\n    hGroupKey: string;\r\n    vGroupKey: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "hGroupKey",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "vGroupKey",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>Group keys to determine the correct groups internally</p>\n",
            "methods": []
        }
    ],
    "injectables": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "BoardComponent",
            "id": "component-BoardComponent-aa554d89458bead259cc1e7c76fb40fa",
            "file": "src/lib/board/board.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngx-taskboard",
            "styleUrls": [
                "./board.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./board.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actionsTemplate",
                    "defaultValue": "null",
                    "description": "<p>Template for actions, add and collapse buttons (see examples) </p>\n",
                    "line": 79,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "backlogName",
                    "defaultValue": "'Backlog'",
                    "description": "<p>Name of the backlog row </p>\n",
                    "line": 17
                },
                {
                    "name": "boardName",
                    "defaultValue": "''",
                    "description": "<p>Board name to show between row and column header </p>\n",
                    "line": 55,
                    "type": "string"
                },
                {
                    "name": "cellAddNewItems",
                    "defaultValue": "true",
                    "description": "<p>Show add buttons in the cells for columns and rows </p>\n",
                    "line": 43,
                    "type": "boolean"
                },
                {
                    "name": "cellClass",
                    "defaultValue": "'card-header'",
                    "description": "<p>Default css class for cell header </p>\n",
                    "line": 91,
                    "type": "string"
                },
                {
                    "name": "dragoverPlaceholderTemplate",
                    "defaultValue": "null",
                    "description": "<p>Template for the placeholder element which will be generated when an item is draged over a cell </p>\n",
                    "line": 82,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "hAddNewItems",
                    "defaultValue": "true",
                    "description": "<p>Show add buttons on the column headings </p>\n",
                    "line": 37,
                    "type": "boolean"
                },
                {
                    "name": "hCollapsed",
                    "defaultValue": "false",
                    "description": "<p>Columns are collapsed or not on init </p>\n",
                    "line": 106,
                    "type": "boolean"
                },
                {
                    "name": "hGroupKey",
                    "defaultValue": "''",
                    "description": "<p>Key to group data for columns </p>\n",
                    "line": 49,
                    "type": "string"
                },
                {
                    "name": "hGroupKeys",
                    "defaultValue": "[]",
                    "description": "<p>Grouping keys for columns (if not passed, the keys will be determined out of the items)\nCaution: If you don&#39;t pass any headings manually, only the columns are shown, which have data.\nIf you want to show emtpy rows, please set them</p>\n",
                    "line": 27,
                    "type": "Array<string>"
                },
                {
                    "name": "hHeaderClass",
                    "defaultValue": "'card-header'",
                    "description": "<p>Default css class for column header </p>\n",
                    "line": 88,
                    "type": "string"
                },
                {
                    "name": "hHeaderTemplate",
                    "defaultValue": "null",
                    "description": "<p>Template for column headers. Current groupName will be passed (see examples) </p>\n",
                    "line": 73,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "invertGroupDirection",
                    "defaultValue": "false",
                    "description": "<p>Invert rows and columns </p>\n",
                    "line": 58,
                    "type": "boolean"
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "description": "<p>Items to display </p>\n",
                    "line": 20,
                    "type": "Array<CardItem> | Array<object>"
                },
                {
                    "name": "itemTemplate",
                    "defaultValue": "null",
                    "description": "<p>Template for items to render. &quot;item&quot; object ist passed (see examples) </p>\n",
                    "line": 67,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "noElementsTemplate",
                    "defaultValue": "null",
                    "description": "<p>Template for collapsed rows to render. &quot;count&quot; object ist passed (see examples) </p>\n",
                    "line": 70,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "scrollable",
                    "defaultValue": "false",
                    "description": "<p>If set to true, the rows and columns are scrollable and will be out of the viewport.\nIf not set, all rows and column will only use 100% of the parent element (aligned by flex/flex-fill)</p>\n",
                    "line": 97,
                    "type": "boolean"
                },
                {
                    "name": "showBacklog",
                    "defaultValue": "true",
                    "description": "<p>Shows the blacklog on onit </p>\n",
                    "line": 14
                },
                {
                    "name": "showUngroupedInBacklog",
                    "defaultValue": "true",
                    "description": "<p>All items which can&#39;t be grouped into rows and columns are stored into the backlog  </p>\n",
                    "line": 61,
                    "type": "boolean"
                },
                {
                    "name": "smallText",
                    "defaultValue": "false",
                    "description": "<p>Decrease overall font size </p>\n",
                    "line": 64,
                    "type": "boolean"
                },
                {
                    "name": "sortBy",
                    "defaultValue": "''",
                    "description": "<p>Sort items by property </p>\n",
                    "line": 52,
                    "type": "string"
                },
                {
                    "name": "vAddNewItems",
                    "defaultValue": "true",
                    "description": "<p>Show add buttons on the row headings </p>\n",
                    "line": 40,
                    "type": "boolean"
                },
                {
                    "name": "vCollapsable",
                    "defaultValue": "true",
                    "description": "<p>Allow to collapse the rows </p>\n",
                    "line": 100,
                    "type": "boolean"
                },
                {
                    "name": "vCollapsed",
                    "defaultValue": "false",
                    "description": "<p>Rows are collapsed or not on init </p>\n",
                    "line": 103,
                    "type": "boolean"
                },
                {
                    "name": "vGroupKey",
                    "defaultValue": "''",
                    "description": "<p>Key to group data for rows </p>\n",
                    "line": 46,
                    "type": "string"
                },
                {
                    "name": "vGroupKeys",
                    "defaultValue": "[]",
                    "description": "<p>Grouping keys for rows (if not passed, the keys will be determined out of the items)\nCaution: If you don&#39;t pass any headings manually, only the rows are shown, which have data.\nIf you want to show emtpy rows, please set them</p>\n",
                    "line": 34,
                    "type": "Array<string>"
                },
                {
                    "name": "vHeaderClass",
                    "defaultValue": "'card-header'",
                    "description": "<p>Default css class for row header </p>\n",
                    "line": 85,
                    "type": "string"
                },
                {
                    "name": "vHeaderTemplate",
                    "defaultValue": "null",
                    "description": "<p>Template for row headers. Current groupName will be passed (see examples) </p>\n",
                    "line": 76,
                    "type": "TemplateRef<any>"
                }
            ],
            "outputsClass": [
                {
                    "name": "dragStarted",
                    "defaultValue": "new EventEmitter<object>()",
                    "description": "<p>Fired when the user drags an item. Current item is passed </p>\n",
                    "line": 109,
                    "type": "EventEmitter"
                },
                {
                    "name": "dropped",
                    "defaultValue": "new EventEmitter<object>()",
                    "description": "<p>Fired when an item is dropped. Current item is passed  </p>\n",
                    "line": 112,
                    "type": "EventEmitter"
                },
                {
                    "name": "elementCreateClick",
                    "defaultValue": "new EventEmitter<ClickEvent>()",
                    "description": "<p>Fired when an add action is click. Current <code>ClickEvent</code> is passed </p>\n",
                    "line": 115,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "collapseStates",
                    "defaultValue": "[]",
                    "type": "Array<CollapseState>",
                    "optional": false,
                    "description": "",
                    "line": 120,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "currentDragZone",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 123,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "dragItem",
                    "type": "CardItem",
                    "optional": false,
                    "description": "",
                    "line": 121,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "hHeadings",
                    "defaultValue": "[]",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 117,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "placeholderSet",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 122,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "vHeadings",
                    "defaultValue": "[]",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 118,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "collapseState",
                    "args": [
                        {
                            "name": "part",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 255,
                    "jsdoctags": [
                        {
                            "name": "part",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createElement",
                    "args": [
                        {
                            "name": "group",
                            "type": "ClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 269,
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "ClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createPlaceholderElement",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLElement",
                    "typeParameters": [],
                    "line": 324,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "determineCorrectGroupKeys",
                    "args": [
                        {
                            "name": "item",
                            "type": "object"
                        }
                    ],
                    "optional": false,
                    "returnType": "GroupKeys",
                    "typeParameters": [],
                    "line": 213,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragEnd",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent"
                        },
                        {
                            "name": "item",
                            "type": "CardItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 264,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "CardItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragOver",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent"
                        },
                        {
                            "name": "vRow",
                            "type": "string"
                        },
                        {
                            "name": "hRow",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 293,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "vRow",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hRow",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent"
                        },
                        {
                            "name": "item",
                            "type": "CardItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 259,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "CardItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent"
                        },
                        {
                            "name": "vRow",
                            "type": "string"
                        },
                        {
                            "name": "hRow",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 273,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "vRow",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hRow",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCaseInsensitivePropKey",
                    "args": [
                        {
                            "name": "item",
                            "type": "object"
                        },
                        {
                            "name": "propKey",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 220,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "object",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "propKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHeadings",
                    "args": [
                        {
                            "name": "groupKey",
                            "type": "string",
                            "defaultValue": "this.vGroupKey"
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<string>",
                    "typeParameters": [],
                    "line": 224,
                    "jsdoctags": [
                        {
                            "name": "groupKey",
                            "type": "string",
                            "defaultValue": "this.vGroupKey",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getItemsOfGroup",
                    "args": [
                        {
                            "name": "vValue",
                            "type": "string"
                        },
                        {
                            "name": "hValue",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Array | Array",
                    "typeParameters": [],
                    "line": 143,
                    "jsdoctags": [
                        {
                            "name": "vValue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hValue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUngroupedItems",
                    "args": [],
                    "optional": false,
                    "returnType": "Array | Array",
                    "typeParameters": [],
                    "line": 234
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127
                },
                {
                    "name": "toggleCollapse",
                    "args": [
                        {
                            "name": "group",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 246,
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleCollapseGroup",
                    "args": [
                        {
                            "name": "direction",
                            "type": "string"
                        },
                        {
                            "name": "collapsed",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "jsdoctags": [
                        {
                            "name": "direction",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collapsed",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2, TemplateRef } from '@angular/core';\r\nimport { CodegenComponentFactoryResolver } from '@angular/core/src/linker/component_factory_resolver';\r\nimport { CardItem, CollapseState, ClickEvent, GroupKeys, } from '../types';\r\n\r\n@Component({\r\n  // tslint:disable-next-line: component-selector\r\n  selector: 'ngx-taskboard',\r\n  templateUrl: './board.component.html',\r\n  styleUrls: ['./board.component.scss']\r\n})\r\nexport class BoardComponent implements OnInit {\r\n\r\n  /** Shows the blacklog on onit */\r\n  @Input() showBacklog = true;\r\n\r\n  /** Name of the backlog row */\r\n  @Input() backlogName = 'Backlog';\r\n\r\n  /** Items to display */\r\n  @Input() items: Array<CardItem> | Array<object> = [];\r\n\r\n  /**\r\n   * Grouping keys for columns (if not passed, the keys will be determined out of the items)\r\n   * Caution: If you don't pass any headings manually, only the columns are shown, which have data.\r\n   * If you want to show emtpy rows, please set them\r\n   */\r\n  @Input() hGroupKeys: Array<string> = [];\r\n\r\n  /**\r\n   * Grouping keys for rows (if not passed, the keys will be determined out of the items)\r\n   * Caution: If you don't pass any headings manually, only the rows are shown, which have data.\r\n   * If you want to show emtpy rows, please set them\r\n   */\r\n  @Input() vGroupKeys: Array<string> = [];\r\n\r\n  /** Show add buttons on the column headings */\r\n  @Input() hAddNewItems: boolean = true;\r\n\r\n  /** Show add buttons on the row headings */\r\n  @Input() vAddNewItems: boolean = true;\r\n\r\n  /** Show add buttons in the cells for columns and rows */\r\n  @Input() cellAddNewItems: boolean = true;\r\n\r\n  /** Key to group data for rows */\r\n  @Input() vGroupKey: string = '';\r\n\r\n  /** Key to group data for columns */\r\n  @Input() hGroupKey: string = '';\r\n\r\n  /** Sort items by property */\r\n  @Input() sortBy: string = '';\r\n\r\n  /** Board name to show between row and column header */\r\n  @Input() boardName: string = '';\r\n\r\n  /** Invert rows and columns */\r\n  @Input() invertGroupDirection: boolean = false;\r\n\r\n  /** All items which can't be grouped into rows and columns are stored into the backlog  */\r\n  @Input() showUngroupedInBacklog: boolean = true;\r\n\r\n  /** Decrease overall font size */\r\n  @Input() smallText: boolean = false;\r\n\r\n  /** Template for items to render. \"item\" object ist passed (see examples) */\r\n  @Input() itemTemplate: TemplateRef<any> = null;\r\n\r\n  /** Template for collapsed rows to render. \"count\" object ist passed (see examples) */\r\n  @Input() noElementsTemplate: TemplateRef<any> = null;\r\n\r\n  /** Template for column headers. Current groupName will be passed (see examples) */\r\n  @Input() hHeaderTemplate: TemplateRef<any> = null;\r\n\r\n  /** Template for row headers. Current groupName will be passed (see examples) */\r\n  @Input() vHeaderTemplate: TemplateRef<any> = null;\r\n\r\n  /** Template for actions, add and collapse buttons (see examples) */\r\n  @Input() actionsTemplate: TemplateRef<any> = null;\r\n\r\n  /** Template for the placeholder element which will be generated when an item is draged over a cell */\r\n  @Input() dragoverPlaceholderTemplate: TemplateRef<any> = null;\r\n\r\n  /** Default css class for row header */\r\n  @Input() vHeaderClass: string = 'card-header';\r\n\r\n  /** Default css class for column header */\r\n  @Input() hHeaderClass: string = 'card-header';\r\n\r\n  /** Default css class for cell header */\r\n  @Input() cellClass: string = 'card-header';\r\n\r\n  /**\r\n   * If set to true, the rows and columns are scrollable and will be out of the viewport.\r\n   * If not set, all rows and column will only use 100% of the parent element (aligned by flex/flex-fill)\r\n   */\r\n  @Input() scrollable: boolean = false;\r\n\r\n  /** Allow to collapse the rows */\r\n  @Input() vCollapsable: boolean = true;\r\n\r\n  /** Rows are collapsed or not on init */\r\n  @Input() vCollapsed: boolean = false;\r\n\r\n  /** Columns are collapsed or not on init */\r\n  @Input() hCollapsed: boolean = false;\r\n\r\n  /** Fired when the user drags an item. Current item is passed */\r\n  @Output() readonly dragStarted = new EventEmitter<object>();\r\n\r\n  /** Fired when an item is dropped. Current item is passed  */\r\n  @Output() readonly dropped = new EventEmitter<object>();\r\n\r\n  /** Fired when an add action is click. Current `ClickEvent` is passed */\r\n  @Output() readonly elementCreateClick = new EventEmitter<ClickEvent>();\r\n\r\n  public hHeadings: Array<string> = [];\r\n  public vHeadings: Array<string> = [];\r\n\r\n  private readonly collapseStates: Array<CollapseState> = [];\r\n  private dragItem: CardItem;\r\n  private placeholderSet = false;\r\n  private currentDragZone: string;\r\n\r\n  constructor(private readonly renderer: Renderer2, private readonly elRef: ElementRef, private readonly cd: ChangeDetectorRef) { }\r\n\r\n  ngOnInit() {\r\n    if (this.invertGroupDirection) {\r\n      const vGkey = this.vGroupKey;\r\n      const hGkey = this.hGroupKey;\r\n\r\n      this.hGroupKey = vGkey;\r\n      this.vGroupKey = hGkey;\r\n    }\r\n\r\n    this.hHeadings = (this.hGroupKeys.length > 0 ? this.hGroupKeys : this.getHeadings(this.hGroupKey));\r\n    this.vHeadings = (this.vGroupKeys.length > 0 ? this.vGroupKeys : this.getHeadings(this.vGroupKey));\r\n\r\n    this.collapseStates.push(...this.vHeadings.map(item => ({ name: item, collapsed: this.vCollapsed })));\r\n    this.collapseStates.push(...this.hHeadings.map(item => ({ name: item, collapsed: this.hCollapsed })));\r\n  }\r\n\r\n  getItemsOfGroup(vValue: string, hValue: string): Array<CardItem> | Array<object> {\r\n    // console.log('getItemsOfGroup', arguments);\r\n    let items = this.items.filter(item => {\r\n\r\n      const groupKeys: GroupKeys = this.determineCorrectGroupKeys(item);\r\n\r\n      const vItem = item[groupKeys.vGroupKey];\r\n      const hItem = item[groupKeys.hGroupKey];\r\n\r\n      if (hItem == undefined) {\r\n        return false;\r\n      }\r\n\r\n      if (vItem == undefined) {\r\n        return false;\r\n      }\r\n\r\n      return (vItem as string).toLowerCase() === vValue.toLowerCase() &&\r\n        (hItem).toLowerCase() === hValue.toLowerCase();\r\n    });\r\n\r\n    if (this.showUngroupedInBacklog) {\r\n      items = items.filter(item => item[this.vGroupKey] !== '' && item[this.hGroupKey] !== '');\r\n    }\r\n\r\n    if (this.sortBy !== '') {\r\n      /* Detect datatype of sortBy-Field */\r\n      const fieldType = typeof (items.some(item => items[0][this.sortBy] !== undefined && items[0][this.sortBy] !== null)[this.sortBy]);\r\n      if (fieldType) {\r\n        return items.sort((a, b) => {\r\n\r\n          const aField = a[this.sortBy];\r\n          const bField = b[this.sortBy];\r\n\r\n          if (fieldType === 'number') {\r\n            return bField - aField;\r\n          }\r\n\r\n          if (fieldType === 'string') {\r\n            if (aField < bField) {\r\n              return -1;\r\n            }\r\n            if (aField > bField) {\r\n              return 1;\r\n            }\r\n\r\n            return 0;\r\n          }\r\n\r\n        });\r\n      } else {\r\n        return items;\r\n      }\r\n\r\n    }\r\n    return items;\r\n  }\r\n\r\n  toggleCollapseGroup(direction: string, collapsed: boolean): void {\r\n    const groupKeysToToggle = this.collapseStates.filter(item => (direction == 'vertical' ? this.vHeadings : this.hHeadings).some(i => i.toLowerCase() == item.name.toLowerCase()));\r\n    groupKeysToToggle.forEach(item => item.collapsed = !collapsed);\r\n    if (groupKeysToToggle.length > 0) {\r\n      if (direction == 'vertical') {\r\n        this.vCollapsed = !collapsed;\r\n      } else {\r\n        this.hCollapsed = !collapsed;\r\n      }\r\n    }\r\n  }\r\n\r\n  determineCorrectGroupKeys(item: object): GroupKeys {\r\n    return {\r\n      hGroupKey: this.getCaseInsensitivePropKey(this.items[0], this.hGroupKey),\r\n      vGroupKey: this.getCaseInsensitivePropKey(this.items[0], this.vGroupKey)\r\n    };\r\n  }\r\n\r\n  getCaseInsensitivePropKey(item: object, propKey: string): string {\r\n    return Object.keys(item).find(key => key.toLowerCase() === propKey.toLowerCase());\r\n  }\r\n\r\n  getHeadings(groupKey: string = this.vGroupKey): Array<string> {\r\n    const keys = (this.items as Array<object>).map((item: any) =>\r\n      item[Object.keys(item).find(key => key.toLowerCase() === groupKey.toLowerCase())]\r\n    );\r\n\r\n    return keys.filter((elem, pos, arr) => {\r\n      return arr.indexOf(elem) === pos && (this.showUngroupedInBacklog && elem !== '');\r\n    });\r\n  }\r\n\r\n  getUngroupedItems(): Array<CardItem> | Array<object> {\r\n    if (this.showUngroupedInBacklog) {\r\n      return this.items.filter(item => {\r\n        const groupKeys: GroupKeys = this.determineCorrectGroupKeys(item);\r\n        const isUngrouped = (item[groupKeys.vGroupKey] === '' && item[groupKeys.hGroupKey] === '') || (item[groupKeys.vGroupKey] === null && item[groupKeys.hGroupKey] === null);\r\n        return isUngrouped;\r\n      });\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  toggleCollapse(group: { hGroup: string, vGroup: string }): void {\r\n\r\n    const part = group.hGroup || group.vGroup;\r\n\r\n    const collapseState = this.collapseState(part);\r\n    this.collapseStates.find(item => item.name === part).collapsed = !collapseState;\r\n    // console.log(\"Toggle: \"+part);\r\n  }\r\n\r\n  collapseState(part: string): boolean {\r\n    return this.collapseStates.find(item => item.name === part).collapsed;\r\n  }\r\n\r\n  public dragStart(event: DragEvent, item: CardItem) {\r\n    this.dragItem = item;\r\n    this.dragStarted.emit(this.dragItem);\r\n  }\r\n\r\n  public dragEnd(event: DragEvent, item: CardItem) {\r\n    this.dragItem = undefined;\r\n\r\n  }\r\n\r\n  createElement(group: ClickEvent) {\r\n    this.elementCreateClick.emit(group);\r\n  }\r\n\r\n  public drop(event: DragEvent, vRow: string, hRow: string) {\r\n    event.preventDefault();\r\n    if (event.currentTarget) {\r\n      const placeholderEl = (event.currentTarget as HTMLElement).querySelector('.placeholder');\r\n      if (placeholderEl) {\r\n        this.renderer.removeChild(placeholderEl.parentNode, placeholderEl);\r\n      }\r\n      this.currentDragZone = '';\r\n      this.placeholderSet = false;\r\n    }\r\n\r\n    const groupKeys: GroupKeys = this.determineCorrectGroupKeys(this.dragItem);\r\n\r\n    this.dragItem[groupKeys.vGroupKey] = vRow;\r\n    this.dragItem[groupKeys.hGroupKey] = hRow;\r\n\r\n    this.dropped.emit(this.dragItem);\r\n    this.dragItem = undefined;\r\n  }\r\n\r\n  public dragOver(event: DragEvent, vRow: string, hRow: string) {\r\n    if (this.dragItem) {\r\n      event.preventDefault();\r\n\r\n      if (vRow == undefined) {\r\n        vRow = '';\r\n      }\r\n\r\n      if (hRow == undefined) {\r\n        hRow = '';\r\n      }\r\n\r\n      const dragZone = `${vRow}-${hRow.replace(' ', '')}`.toLowerCase();\r\n      if (dragZone !== this.currentDragZone && this.currentDragZone !== '') {\r\n        const lastPlaceholder = document.getElementById(this.currentDragZone);\r\n        if (lastPlaceholder) {\r\n          this.renderer.removeChild(lastPlaceholder.parentNode, lastPlaceholder);\r\n          this.placeholderSet = false;\r\n        }\r\n      }\r\n\r\n      this.currentDragZone = `${vRow}-${hRow.replace(' ', '')}`.toLowerCase();\r\n\r\n      if (!this.placeholderSet) {\r\n        const placeholderElement = this.createPlaceholderElement(this.currentDragZone);\r\n        this.renderer.appendChild(event.currentTarget, placeholderElement);\r\n        this.placeholderSet = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  createPlaceholderElement(id: string): HTMLElement {\r\n    if (this.dragoverPlaceholderTemplate) {\r\n      return this.dragoverPlaceholderTemplate.elementRef.nativeElement.cloneNode(true);\r\n    } else {\r\n      const placeholderElement: HTMLElement = this.renderer.createElement('div');\r\n      this.renderer.setStyle(placeholderElement, 'border', '1px dashed gray');\r\n      this.renderer.setStyle(placeholderElement, 'width', '100%');\r\n      this.renderer.setStyle(placeholderElement, 'height', '50px');\r\n      this.renderer.setAttribute(placeholderElement, 'id', this.currentDragZone);\r\n      this.renderer.setAttribute(placeholderElement, 'class', 'placeholder');\r\n\r\n      return placeholderElement;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  .overflow-hidden {\r\n    overflow: hidden;\r\n  }\r\n\r\n  .overflow-scroll {\r\n    overflow: scroll;\r\n  }\r\n}\r\n",
                    "styleUrl": "./board.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 123,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"h-100 d-flex flex-column align-items-stretch border-0\" [class.small]=\"smallText\" style=\"overflow: hidden\">\r\n  <div class=\"d-flex flex-row align-items-stretch flex-fill h-100\">\r\n\r\n    <div class=\"backlog border-right\" *ngIf=\"showBacklog\">\r\n      <div class=\"card border-right-0 border-top-0 border-left-0 w-100 h-100\">\r\n        <div class=\"{{hHeaderClass}} d-flex flex-row justify-content-between\">\r\n          {{ backlogName }}\r\n\r\n          <div class=\"actions ml-3\">\r\n            <fa-icon [icon]=\"['fas','plus-square']\" [fixedWidth]=\"true\"></fa-icon>\r\n            <fa-icon [icon]=\"['fas','chevron-left']\" [fixedWidth]=\"true\"></fa-icon>\r\n          </div>\r\n\r\n\r\n        </div>\r\n        <ul class=\"list-group list-group-flush p-3 h-100\" (dragover)=\"dragOver($event, null, null)\"\r\n          (drop)=\"drop($event, null, null)\">\r\n          <div class=\" ungrouped-item\" *ngFor=\"let item of getUngroupedItems()\" draggable=\"true\"\r\n            (dragstart)=\"dragStart($event, item)\" (dragend)=\"dragEnd($event, item)\">\r\n            <ng-container *ngIf=\"itemTemplate\">\r\n              <ng-container *ngTemplateOutlet=\"itemTemplate; context { item: item }\"></ng-container>\r\n            </ng-container>\r\n\r\n            <ng-container *ngIf=\"!itemTemplate\">\r\n              <div class=\"card mb-1 border-bottom-0 border-top-0\" style=\"border-left: 5px solid; border-radius: 0;\"\r\n                [style.border-left-color]=\"item?.color\">\r\n                <div class=\"card-header border-top d-flex flex-row justify-content-between\">\r\n                  <div class=\"small\">\r\n                    <span class=\"font-weight-bold\">#{{item.id}}</span>\r\n                    <span class=\"ml-3\">{{ item.name }}</span>\r\n                    <span class=\"ml-3\">{{ item.priority }}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </ng-container>\r\n          </div>\r\n        </ul>\r\n      </div>\r\n\r\n    </div>\r\n    <div class=\"column-cards d-flex flex-column flex-fill\">\r\n\r\n      <div class=\"headings d-flex flex-row align-items-stretch w-100\">\r\n        <div class=\"col-2 border-left card-header border-left-0 d-flex flex-row\"\r\n          *ngIf=\"vGroupKey\">\r\n          <div class=\"d-flex flex-row w-100\">\r\n            <div class=\"boardname flex-fill\">{{ boardName }}</div>\r\n            <div class=\"h-v-actions align-self-center\">\r\n              <fa-icon [icon]=\"['fas', vCollapsed ? 'chevron-down' : 'chevron-up']\" [fixedWidth]=\"true\" (click)=\"toggleCollapseGroup('vertical', vCollapsed)\"></fa-icon>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"border-left {{hHeaderClass}} d-flex flex-row justify-content-between\"\r\n          [class.bg-white]=\"collapseState(group)\" [class.border-bottom-0]=\"collapseState(group)\"\r\n          [class.col]=\"!collapseState(group)\" *ngFor=\"let group of hHeadings\"\r\n          [class.h-collapsed]=\"collapseState(group)\">\r\n          <div class=\"group-heading\" *ngIf=\"!collapseState(group)\">\r\n\r\n\r\n            <ng-container [ngIf]=\"hHeaderTemplate\" *ngTemplateOutlet=\"hHeaderTemplate; context: { groupName: group }\">\r\n            </ng-container>\r\n            <ng-container *ngIf=\"!hHeaderTemplate\">\r\n              {{group || 'Ungrouped'}}\r\n            </ng-container>\r\n          </div>\r\n          <div *ngIf=\"!collapseState(group)\">\r\n            <ng-content\r\n              *ngTemplateOutlet=\"cardAction; context: { withNew: hAddNewItems, group: { hGroup: group, vGroup: null}, collapser: false, chevronIcon: !collapseState(group) ? 'chevron-left' : 'chevron-right' }\">\r\n            </ng-content>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"d-flex flex-column  align-items-stretch\" [class.flex-fill]=\"!scrollable\"\r\n        [class.overflow-auto]=\"scrollable\">\r\n\r\n        <div class=\"d-flex flex-row\" [class.flex-fill]=\"!collapseState(vGroup)\" *ngFor=\"let vGroup of vHeadings\">\r\n\r\n          <div class=\"col-2 border-left {{vHeaderClass}} border-left-0 d-flex flex-row justify-content-between\"\r\n            *ngIf=\"vGroupKey\">\r\n            <div class=\"h-100 border-bottom-0 border-left-0 p-0 m-0 flex-fill\">\r\n\r\n              <ng-container [ngIf]=\"vHeaderTemplate\"\r\n                *ngTemplateOutlet=\"vHeaderTemplate; context: { groupName: vGroup }\">\r\n              </ng-container>\r\n              <ng-container *ngIf=\"!vHeaderTemplate\">\r\n                {{ vGroup || 'Ungrouped' }}\r\n              </ng-container>\r\n            </div>\r\n\r\n\r\n\r\n            <div class=\"vertical-actions d-flex flex-column\" [class.flex-column]=\"!collapseState(vGroup)\"\r\n              [class.flex-row]=\"collapseState(vGroup)\" [class.flex-row-reverse]=\"collapseState(vGroup)\">\r\n              <div class=\"align-self-start flex-fill\">\r\n                <ng-content\r\n                  *ngTemplateOutlet=\"cardAction; context: { withNew: false, group: { hGroup: null, vGroup: vGroup}, collapser: true, chevronIcon: !collapseState(vGroup) ? 'chevron-up' : 'chevron-down'  }\">\r\n                </ng-content>\r\n              </div>\r\n              <div class=\"align-self-start\">\r\n                <ng-content class=\"align-self-end\"\r\n                  *ngTemplateOutlet=\"cardAction; context: { withNew: vAddNewItems, group: { hGroup: null, vGroup: vGroup}, collapser: false }\">\r\n                </ng-content>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n\r\n          <ng-container *ngFor=\"let hGroup of hHeadings\">\r\n            <div class=\"border-left {{cellClass}} bg-white d-flex flex-column\" [class.col]=\"!collapseState(hGroup)\"\r\n              [class.border-bottom-0]=\"collapseState(hGroup)\" [class.v-collapsed]=\"collapseState(vGroup)\"\r\n              [class.h-collapsed]=\"collapseState(hGroup)\">\r\n              <ng-container *ngIf=\"!collapseState(vGroup) && !collapseState(hGroup)\">\r\n\r\n                <div class=\"cell-items flex-fill\" (dragover)=\"dragOver($event, vGroup, hGroup)\"\r\n                  (drop)=\"drop($event, vGroup, hGroup)\">\r\n                  <ng-container *ngFor=\"let item of getItemsOfGroup(vGroup, hGroup)\">\r\n\r\n                    <div class=\"item-container p-0 m-0\" draggable=\"true\" (dragstart)=\"dragStart($event, item)\"\r\n                      (dragend)=\"dragEnd($event, item)\">\r\n                      <!-- Items -->\r\n                      <ng-container *ngIf=\"itemTemplate\">\r\n                        <ng-container *ngTemplateOutlet=\"itemTemplate; context { item: item }\"></ng-container>\r\n                      </ng-container>\r\n\r\n                      <ng-container *ngIf=\"!itemTemplate\">\r\n                        <div class=\"card mb-1 border-bottom-0 border-top-0\"\r\n                          style=\"border-left: 5px solid; border-radius: 0;\" [style.border-left-color]=\"item?.color\">\r\n                          <div class=\"card-header border-top d-flex flex-row justify-content-between\">\r\n                            <div class=\"small\">\r\n                              <span class=\"font-weight-bold\">#{{item.id}}</span>\r\n                              <span class=\"ml-3\">{{ item.name }}</span>\r\n                              <span class=\"ml-3\">{{ item.priority }}</span>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </ng-container>\r\n                    </div>\r\n\r\n                  </ng-container>\r\n\r\n                  <!-- <ng-container *ngIf=\"getItemsOfGroup(vGroup, hGroup).length == 0\">\r\n                    <div class=\"card mb-1 border-bottom-0 border-top-0\"\r\n                      style=\"border-left: 5px solid; border-radius: 0;\">\r\n                      <div class=\"card-header border-top d-flex flex-row justify-content-between\">\r\n\r\n                      </div>\r\n                    </div>\r\n                  </ng-container> -->\r\n\r\n                </div>\r\n                <div class=\"cell-actions d-flex flex-row align-self-end\">\r\n                  <ng-content\r\n                    *ngTemplateOutlet=\"cardAction; context: { withNew: cellAddNewItems, group: { hGroup: hGroup, vGroup: vGroup}, collapser: false }\">\r\n                  </ng-content>\r\n                </div>\r\n\r\n              </ng-container>\r\n              <ng-container *ngIf=\"collapseState(vGroup) && !collapseState(hGroup)\">\r\n                <div class=\"text-center\"  (dragover)=\"dragOver($event, vGroup, hGroup)\"\r\n                (drop)=\"drop($event, vGroup, hGroup)\">\r\n                  <ng-container [ngIf]=\"noElementsTemplate\"\r\n                    *ngTemplateOutlet=\"noElementsTemplate; context: { count: getItemsOfGroup(vGroup, hGroup).length }\">\r\n                  </ng-container>\r\n                  <ng-container *ngIf=\"!noElementsTemplate\">{{ getItemsOfGroup(vGroup, hGroup).length }} elements\r\n                  </ng-container>\r\n                </div>\r\n              </ng-container>\r\n              <ng-container *ngIf=\"collapseState(hGroup)\">\r\n\r\n              </ng-container>\r\n              <!-- {{ collapseState(hGroup) }} / {{ collapseState(vGroup) }} -->\r\n\r\n            </div>\r\n          </ng-container>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #cardAction let-withNew=\"withNew\" let-group=\"group\" let-chevronIcon=\"chevronIcon\"\r\n  let-collapser=\"collapser\">\r\n\r\n  <ng-container [ngIf]=\"actionsTemplate\"\r\n    *ngTemplateOutlet=\"actionsTemplate; context: { actionConfig: { group: group, chevronIcon: chevronIcon, collapser: collapser  }  }\">\r\n  </ng-container>\r\n  <ng-container *ngIf=\"!actionsTemplate\">\r\n    <div class=\"actions ml-3\" *ngIf=\"vGroupKey\">\r\n      <fa-icon [icon]=\"['fas','plus-square']\" [fixedWidth]=\"true\" *ngIf=\"withNew\" (click)=\"createElement(group)\">\r\n      </fa-icon>\r\n      <fa-icon [icon]=\"['fas',chevronIcon ? chevronIcon : 'chevron-left']\" [fixedWidth]=\"true\"\r\n        (click)=\"toggleCollapse(group)\" *ngIf=\"(collapser != null ? collapser : true)\"></fa-icon>\r\n    </div>\r\n  </ng-container>\r\n\r\n\r\n</ng-template>"
        }
    ],
    "modules": [
        {
            "name": "NgxTaskboardModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BoardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BoardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": [],
    "routes": [],
    "coverage": {
        "count": 34,
        "status": "medium",
        "files": [
            {
                "filePath": "src/lib/board/board.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardComponent",
                "coveragePercent": 57,
                "coverageCount": "31/54",
                "status": "good"
            },
            {
                "filePath": "src/lib/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CardItem",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/lib/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClickEvent",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/lib/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CollapseState",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/lib/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GroupKeys",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            }
        ]
    }
}