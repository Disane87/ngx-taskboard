{
    "pipes": [],
    "interfaces": [
        {
            "name": "CardItem",
            "id": "interface-CardItem-f8fecade11d4698eaa6a0653e6050f8b",
            "file": "projects/ngx-taskboard-lib/src/lib/types.ts",
            "type": "interface",
            "sourceCode": "export interface CardItem {\r\n    id: number;\r\n    name: string;\r\n    status?: string;\r\n    color?: string;\r\n    user?: string;\r\n    priority?: number;\r\n}\r\n\r\n/**\r\n * All the collapse stated of every group item (horizontal / vertical)\r\n *\r\n * @export\r\n */\r\nexport interface CollapseState {\r\n    name: string;\r\n    collapsed: boolean;\r\n}\r\n\r\n/**\r\n * Datatype which is emitted when an item should be added\r\n *\r\n * @export\r\n */\r\nexport interface ClickEvent {\r\n    hGroup: string;\r\n    vGroup: string;\r\n}\r\n\r\n/**\r\n * Group keys to determine the correct groups internally\r\n *\r\n * @export\r\n */\r\nexport interface GroupKeys {\r\n    hGroupKey: string;\r\n    vGroupKey: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "color",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "priority",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "user",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>Item to render</p>\n",
            "methods": []
        },
        {
            "name": "ClickEvent",
            "id": "interface-ClickEvent-f8fecade11d4698eaa6a0653e6050f8b",
            "file": "projects/ngx-taskboard-lib/src/lib/types.ts",
            "type": "interface",
            "sourceCode": "export interface CardItem {\r\n    id: number;\r\n    name: string;\r\n    status?: string;\r\n    color?: string;\r\n    user?: string;\r\n    priority?: number;\r\n}\r\n\r\n/**\r\n * All the collapse stated of every group item (horizontal / vertical)\r\n *\r\n * @export\r\n */\r\nexport interface CollapseState {\r\n    name: string;\r\n    collapsed: boolean;\r\n}\r\n\r\n/**\r\n * Datatype which is emitted when an item should be added\r\n *\r\n * @export\r\n */\r\nexport interface ClickEvent {\r\n    hGroup: string;\r\n    vGroup: string;\r\n}\r\n\r\n/**\r\n * Group keys to determine the correct groups internally\r\n *\r\n * @export\r\n */\r\nexport interface GroupKeys {\r\n    hGroupKey: string;\r\n    vGroupKey: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "hGroup",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "vGroup",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>Datatype which is emitted when an item should be added</p>\n",
            "methods": []
        },
        {
            "name": "CollapseState",
            "id": "interface-CollapseState-f8fecade11d4698eaa6a0653e6050f8b",
            "file": "projects/ngx-taskboard-lib/src/lib/types.ts",
            "type": "interface",
            "sourceCode": "export interface CardItem {\r\n    id: number;\r\n    name: string;\r\n    status?: string;\r\n    color?: string;\r\n    user?: string;\r\n    priority?: number;\r\n}\r\n\r\n/**\r\n * All the collapse stated of every group item (horizontal / vertical)\r\n *\r\n * @export\r\n */\r\nexport interface CollapseState {\r\n    name: string;\r\n    collapsed: boolean;\r\n}\r\n\r\n/**\r\n * Datatype which is emitted when an item should be added\r\n *\r\n * @export\r\n */\r\nexport interface ClickEvent {\r\n    hGroup: string;\r\n    vGroup: string;\r\n}\r\n\r\n/**\r\n * Group keys to determine the correct groups internally\r\n *\r\n * @export\r\n */\r\nexport interface GroupKeys {\r\n    hGroupKey: string;\r\n    vGroupKey: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "collapsed",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>All the collapse stated of every group item (horizontal / vertical)</p>\n",
            "methods": []
        },
        {
            "name": "GroupKeys",
            "id": "interface-GroupKeys-f8fecade11d4698eaa6a0653e6050f8b",
            "file": "projects/ngx-taskboard-lib/src/lib/types.ts",
            "type": "interface",
            "sourceCode": "export interface CardItem {\r\n    id: number;\r\n    name: string;\r\n    status?: string;\r\n    color?: string;\r\n    user?: string;\r\n    priority?: number;\r\n}\r\n\r\n/**\r\n * All the collapse stated of every group item (horizontal / vertical)\r\n *\r\n * @export\r\n */\r\nexport interface CollapseState {\r\n    name: string;\r\n    collapsed: boolean;\r\n}\r\n\r\n/**\r\n * Datatype which is emitted when an item should be added\r\n *\r\n * @export\r\n */\r\nexport interface ClickEvent {\r\n    hGroup: string;\r\n    vGroup: string;\r\n}\r\n\r\n/**\r\n * Group keys to determine the correct groups internally\r\n *\r\n * @export\r\n */\r\nexport interface GroupKeys {\r\n    hGroupKey: string;\r\n    vGroupKey: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "hGroupKey",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "vGroupKey",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>Group keys to determine the correct groups internally</p>\n",
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "TaskboardService",
            "id": "injectable-TaskboardService-7062e0e5e14bcd052efe4ad1e05ad837",
            "file": "projects/ngx-taskboard-lib/src/lib/taskboard.service.ts",
            "properties": [
                {
                    "name": "filterChanged$",
                    "defaultValue": "new EventEmitter<string>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "objectProperties",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { EventEmitter, Injectable } from \"@angular/core\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class TaskboardService {\r\n\r\n  public filterChanged$ = new EventEmitter<string>();\r\n  public objectProperties: string[] = [];\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        }
    ],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "BoardComponent",
            "id": "component-BoardComponent-d5475dcdb14f8a5a225aa36cfce26070",
            "file": "projects/ngx-taskboard-lib/src/lib/board/board.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngx-taskboard",
            "styleUrls": [
                "./board.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./board.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actionsTemplate",
                    "defaultValue": "null",
                    "description": "<p>Template for actions, add and collapse buttons (see examples) </p>\n",
                    "line": 80,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "backlogName",
                    "defaultValue": "'Backlog'",
                    "description": "<p>Name of the backlog row </p>\n",
                    "line": 18
                },
                {
                    "name": "boardName",
                    "defaultValue": "''",
                    "description": "<p>Board name to show between row and column header </p>\n",
                    "line": 56
                },
                {
                    "name": "cellAddNewItems",
                    "defaultValue": "true",
                    "description": "<p>Show add buttons in the cells for columns and rows </p>\n",
                    "line": 44
                },
                {
                    "name": "cellClass",
                    "defaultValue": "'card-header'",
                    "description": "<p>Default css class for cell header </p>\n",
                    "line": 98
                },
                {
                    "name": "columnWidth",
                    "defaultValue": "200",
                    "description": "<p>Column width (in px) which is applied to the columns when the content is scollable </p>\n",
                    "line": 107
                },
                {
                    "name": "dragoverPlaceholderTemplate",
                    "defaultValue": "null",
                    "description": "<p>Template for the placeholder element which will be generated when an item is draged over a cell </p>\n",
                    "line": 83,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "filter",
                    "defaultValue": "''",
                    "description": "<p>Predefined filter for the searchbar. If set, the items are filtered by the term on init. </p>\n",
                    "line": 125
                },
                {
                    "name": "filterOnProperties",
                    "defaultValue": "[]",
                    "description": "<p>Specify the properties which will be searched for the given term in filter. If not properties are given, all will be searched </p>\n",
                    "line": 128,
                    "type": "Array<string>"
                },
                {
                    "name": "filterRowPlaceholder",
                    "defaultValue": "'Search for items'",
                    "description": "<p>Placeholder for the input with the filter row </p>\n",
                    "line": 122
                },
                {
                    "name": "hAddNewItems",
                    "defaultValue": "true",
                    "description": "<p>Show add buttons on the column headings </p>\n",
                    "line": 38
                },
                {
                    "name": "hCollapsed",
                    "defaultValue": "false",
                    "description": "<p>Columns are collapsed or not on init </p>\n",
                    "line": 116
                },
                {
                    "name": "hGroupKey",
                    "defaultValue": "''",
                    "description": "<p>Key to group data for columns </p>\n",
                    "line": 50
                },
                {
                    "name": "hGroupKeys",
                    "defaultValue": "[]",
                    "description": "<p>Grouping keys for columns (if not passed, the keys will be determined out of the items)\nCaution: If you don&#39;t pass any headings manually, only the columns are shown, which have data.\nIf you want to show emtpy rows, please set them</p>\n",
                    "line": 28,
                    "type": "Array<string>"
                },
                {
                    "name": "hHeaderClass",
                    "defaultValue": "'card-header card-header-bg'",
                    "description": "<p>Default css class for column header </p>\n",
                    "line": 89
                },
                {
                    "name": "hHeaderTemplate",
                    "defaultValue": "null",
                    "description": "<p>Template for column headers. Current groupName will be passed (see examples) </p>\n",
                    "line": 74,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "invertGroupDirection",
                    "defaultValue": "false",
                    "description": "<p>Invert rows and columns </p>\n",
                    "line": 59
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "description": "<p>Items to display </p>\n",
                    "line": 21,
                    "type": "Array<CardItem> | Array<object>"
                },
                {
                    "name": "itemTemplate",
                    "defaultValue": "null",
                    "description": "<p>Template for items to render. &quot;item&quot; object ist passed (see examples) </p>\n",
                    "line": 68,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "noElementsTemplate",
                    "defaultValue": "null",
                    "description": "<p>Template for collapsed rows to render. &quot;count&quot; object ist passed (see examples) </p>\n",
                    "line": 71,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "scrollable",
                    "defaultValue": "false",
                    "description": "<p>If set to true, the rows and columns are scrollable and will be out of the viewport.\nIf not set, all rows and column will only use 100% of the parent element (aligned by flex/flex-fill)</p>\n",
                    "line": 104
                },
                {
                    "name": "showBacklog",
                    "defaultValue": "true",
                    "description": "<p>Shows the blacklog on onit </p>\n",
                    "line": 15
                },
                {
                    "name": "showFilterRow",
                    "defaultValue": "true",
                    "description": "<p>Shows the filter row to search items by filter in filterOnProperties array </p>\n",
                    "line": 119
                },
                {
                    "name": "showUngroupedInBacklog",
                    "defaultValue": "true",
                    "description": "<p>All items which can&#39;t be grouped into rows and columns are stored into the backlog  </p>\n",
                    "line": 62
                },
                {
                    "name": "smallText",
                    "defaultValue": "false",
                    "description": "<p>Decrease overall font size </p>\n",
                    "line": 65
                },
                {
                    "name": "sortBy",
                    "defaultValue": "''",
                    "description": "<p>Sort items by property </p>\n",
                    "line": 53
                },
                {
                    "name": "stickyHorizontalHeaderKeys",
                    "defaultValue": "true",
                    "description": "<p>If set to true, the horizontal group keys are fixed positioned to the top and remain at the top while scrolling. Only applied when scrollable is true </p>\n",
                    "line": 92
                },
                {
                    "name": "stickyVerticalHeaderKeys",
                    "defaultValue": "false",
                    "description": "<p>If set to true, the vertical group keys are fixed positioned to the top and remain at the top while scrolling. Only applied when scrollable is true </p>\n",
                    "line": 95
                },
                {
                    "name": "vAddNewItems",
                    "defaultValue": "true",
                    "description": "<p>Show add buttons on the row headings </p>\n",
                    "line": 41
                },
                {
                    "name": "vCollapsable",
                    "defaultValue": "true",
                    "description": "<p>Allow to collapse the rows </p>\n",
                    "line": 110
                },
                {
                    "name": "vCollapsed",
                    "defaultValue": "false",
                    "description": "<p>Rows are collapsed or not on init </p>\n",
                    "line": 113
                },
                {
                    "name": "vGroupKey",
                    "defaultValue": "''",
                    "description": "<p>Key to group data for rows </p>\n",
                    "line": 47
                },
                {
                    "name": "vGroupKeys",
                    "defaultValue": "[]",
                    "description": "<p>Grouping keys for rows (if not passed, the keys will be determined out of the items)\nCaution: If you don&#39;t pass any headings manually, only the rows are shown, which have data.\nIf you want to show emtpy rows, please set them</p>\n",
                    "line": 35,
                    "type": "Array<string>"
                },
                {
                    "name": "vHeaderClass",
                    "defaultValue": "'card-header'",
                    "description": "<p>Default css class for row header </p>\n",
                    "line": 86
                },
                {
                    "name": "vHeaderTemplate",
                    "defaultValue": "null",
                    "description": "<p>Template for row headers. Current groupName will be passed (see examples) </p>\n",
                    "line": 77,
                    "type": "TemplateRef<any>"
                }
            ],
            "outputsClass": [
                {
                    "name": "dragStarted",
                    "defaultValue": "new EventEmitter<object>()",
                    "description": "<p>Fired when the user drags an item. Current item is passed </p>\n",
                    "line": 131,
                    "type": "EventEmitter"
                },
                {
                    "name": "dropped",
                    "defaultValue": "new EventEmitter<object>()",
                    "description": "<p>Fired when an item is dropped. Current item is passed  </p>\n",
                    "line": 134,
                    "type": "EventEmitter"
                },
                {
                    "name": "elementCreateClick",
                    "defaultValue": "new EventEmitter<ClickEvent>()",
                    "description": "<p>Fired when an add action is click. Current ClickEvent is passed </p>\n",
                    "line": 137,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "collapseStates",
                    "defaultValue": "[]",
                    "type": "Array<CollapseState>",
                    "optional": false,
                    "description": "",
                    "line": 142,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "currentDragZone",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 145,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "dragItem",
                    "type": "CardItem",
                    "optional": false,
                    "description": "",
                    "line": 143,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "hHeadings",
                    "defaultValue": "[]",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 139,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "placeholderSet",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 144,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "vHeadings",
                    "defaultValue": "[]",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 140,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "calculateScrollBarWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 387
                },
                {
                    "name": "collapseState",
                    "args": [
                        {
                            "name": "part",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 303,
                    "jsdoctags": [
                        {
                            "name": "part",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createElement",
                    "args": [
                        {
                            "name": "group",
                            "type": "ClickEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 317,
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "ClickEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createPlaceholderElement",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLElement",
                    "typeParameters": [],
                    "line": 393,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "determineCorrectGroupKeys",
                    "args": [
                        {
                            "name": "item",
                            "type": "object"
                        }
                    ],
                    "optional": false,
                    "returnType": "GroupKeys",
                    "typeParameters": [],
                    "line": 249,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragEnd",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent"
                        },
                        {
                            "name": "item",
                            "type": "CardItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 312,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "CardItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragOver",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent"
                        },
                        {
                            "name": "vRow",
                            "type": "string"
                        },
                        {
                            "name": "hRow",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 341,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "vRow",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hRow",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent"
                        },
                        {
                            "name": "item",
                            "type": "CardItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 307,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "CardItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent"
                        },
                        {
                            "name": "vRow",
                            "type": "string"
                        },
                        {
                            "name": "hRow",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 321,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "vRow",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hRow",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCaseInsensitivePropKey",
                    "args": [
                        {
                            "name": "item",
                            "type": "object"
                        },
                        {
                            "name": "propKey",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 256,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "object",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "propKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColumnWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "object",
                    "typeParameters": [],
                    "line": 379
                },
                {
                    "name": "getHeadings",
                    "args": [
                        {
                            "name": "groupKey",
                            "type": "string",
                            "defaultValue": "this.vGroupKey"
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<string>",
                    "typeParameters": [],
                    "line": 268,
                    "jsdoctags": [
                        {
                            "name": "groupKey",
                            "type": "string",
                            "defaultValue": "this.vGroupKey",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getItemsOfGroup",
                    "args": [
                        {
                            "name": "vValue",
                            "type": "string"
                        },
                        {
                            "name": "hValue",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Array | Array",
                    "typeParameters": [],
                    "line": 174,
                    "jsdoctags": [
                        {
                            "name": "vValue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hValue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUngroupedItems",
                    "args": [],
                    "optional": false,
                    "returnType": "Array | Array",
                    "typeParameters": [],
                    "line": 279
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154
                },
                {
                    "name": "scrollBarStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "object",
                    "typeParameters": [],
                    "line": 372
                },
                {
                    "name": "toggleCollapse",
                    "args": [
                        {
                            "name": "group",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 294,
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleCollapseGroup",
                    "args": [
                        {
                            "name": "direction",
                            "type": "string"
                        },
                        {
                            "name": "collapsed",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 234,
                    "jsdoctags": [
                        {
                            "name": "direction",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "collapsed",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2, TemplateRef } from '@angular/core';\r\nimport { CodegenComponentFactoryResolver } from '@angular/core/src/linker/component_factory_resolver';\r\nimport { CardItem, CollapseState, ClickEvent, GroupKeys, } from '../types';\r\nimport { TaskboardService } from '../taskboard.service';\r\n\r\n@Component({\r\n  // tslint:disable-next-line: component-selector\r\n  selector: 'ngx-taskboard',\r\n  templateUrl: './board.component.html',\r\n  styleUrls: ['./board.component.scss']\r\n})\r\nexport class BoardComponent implements OnInit {\r\n\r\n  /** Shows the blacklog on onit */\r\n  @Input() showBacklog = true;\r\n\r\n  /** Name of the backlog row */\r\n  @Input() backlogName = 'Backlog';\r\n\r\n  /** Items to display */\r\n  @Input() items: Array<CardItem> | Array<object> = [];\r\n\r\n  /**\r\n   * Grouping keys for columns (if not passed, the keys will be determined out of the items)\r\n   * Caution: If you don't pass any headings manually, only the columns are shown, which have data.\r\n   * If you want to show emtpy rows, please set them\r\n   */\r\n  @Input() hGroupKeys: Array<string> = [];\r\n\r\n  /**\r\n   * Grouping keys for rows (if not passed, the keys will be determined out of the items)\r\n   * Caution: If you don't pass any headings manually, only the rows are shown, which have data.\r\n   * If you want to show emtpy rows, please set them\r\n   */\r\n  @Input() vGroupKeys: Array<string> = [];\r\n\r\n  /** Show add buttons on the column headings */\r\n  @Input() hAddNewItems = true;\r\n\r\n  /** Show add buttons on the row headings */\r\n  @Input() vAddNewItems = true;\r\n\r\n  /** Show add buttons in the cells for columns and rows */\r\n  @Input() cellAddNewItems = true;\r\n\r\n  /** Key to group data for rows */\r\n  @Input() vGroupKey = '';\r\n\r\n  /** Key to group data for columns */\r\n  @Input() hGroupKey = '';\r\n\r\n  /** Sort items by property */\r\n  @Input() sortBy = '';\r\n\r\n  /** Board name to show between row and column header */\r\n  @Input() boardName = '';\r\n\r\n  /** Invert rows and columns */\r\n  @Input() invertGroupDirection = false;\r\n\r\n  /** All items which can't be grouped into rows and columns are stored into the backlog  */\r\n  @Input() showUngroupedInBacklog = true;\r\n\r\n  /** Decrease overall font size */\r\n  @Input() smallText = false;\r\n\r\n  /** Template for items to render. \"item\" object ist passed (see examples) */\r\n  @Input() itemTemplate: TemplateRef<any> = null;\r\n\r\n  /** Template for collapsed rows to render. \"count\" object ist passed (see examples) */\r\n  @Input() noElementsTemplate: TemplateRef<any> = null;\r\n\r\n  /** Template for column headers. Current groupName will be passed (see examples) */\r\n  @Input() hHeaderTemplate: TemplateRef<any> = null;\r\n\r\n  /** Template for row headers. Current groupName will be passed (see examples) */\r\n  @Input() vHeaderTemplate: TemplateRef<any> = null;\r\n\r\n  /** Template for actions, add and collapse buttons (see examples) */\r\n  @Input() actionsTemplate: TemplateRef<any> = null;\r\n\r\n  /** Template for the placeholder element which will be generated when an item is draged over a cell */\r\n  @Input() dragoverPlaceholderTemplate: TemplateRef<any> = null;\r\n\r\n  /** Default css class for row header */\r\n  @Input() vHeaderClass = 'card-header';\r\n\r\n  /** Default css class for column header */\r\n  @Input() hHeaderClass = 'card-header card-header-bg';\r\n\r\n  /** If set to true, the horizontal group keys are fixed positioned to the top and remain at the top while scrolling. Only applied when scrollable is true */\r\n  @Input() stickyHorizontalHeaderKeys = true;\r\n\r\n  /** If set to true, the vertical group keys are fixed positioned to the top and remain at the top while scrolling. Only applied when scrollable is true */\r\n  @Input() stickyVerticalHeaderKeys = false;\r\n\r\n  /** Default css class for cell header */\r\n  @Input() cellClass = 'card-header';\r\n\r\n  /**\r\n   * If set to true, the rows and columns are scrollable and will be out of the viewport.\r\n   * If not set, all rows and column will only use 100% of the parent element (aligned by flex/flex-fill)\r\n   */\r\n  @Input() scrollable = false;\r\n\r\n  /** Column width (in px) which is applied to the columns when the content is scollable */\r\n  @Input() columnWidth = 200;\r\n\r\n  /** Allow to collapse the rows */\r\n  @Input() vCollapsable = true;\r\n\r\n  /** Rows are collapsed or not on init */\r\n  @Input() vCollapsed = false;\r\n\r\n  /** Columns are collapsed or not on init */\r\n  @Input() hCollapsed = false;\r\n\r\n  /** Shows the filter row to search items by filter in filterOnProperties array */\r\n  @Input() showFilterRow = true;\r\n\r\n  /** Placeholder for the input with the filter row */\r\n  @Input() filterRowPlaceholder = 'Search for items';\r\n\r\n  /** Predefined filter for the searchbar. If set, the items are filtered by the term on init. */\r\n  @Input() filter = '';\r\n\r\n  /** Specify the properties which will be searched for the given term in filter. If not properties are given, all will be searched */\r\n  @Input() filterOnProperties: Array<string> = [];\r\n\r\n  /** Fired when the user drags an item. Current item is passed */\r\n  @Output() readonly dragStarted = new EventEmitter<object>();\r\n\r\n  /** Fired when an item is dropped. Current item is passed  */\r\n  @Output() readonly dropped = new EventEmitter<object>();\r\n\r\n  /** Fired when an add action is click. Current ClickEvent is passed */\r\n  @Output() readonly elementCreateClick = new EventEmitter<ClickEvent>();\r\n\r\n  public hHeadings: Array<string> = [];\r\n  public vHeadings: Array<string> = [];\r\n\r\n  private readonly collapseStates: Array<CollapseState> = [];\r\n  private dragItem: CardItem;\r\n  private placeholderSet = false;\r\n  private currentDragZone: string;\r\n\r\n  constructor(\r\n    private readonly renderer: Renderer2,\r\n    private readonly elRef: ElementRef,\r\n    private readonly cd: ChangeDetectorRef,\r\n    private taskboardService: TaskboardService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    if (this.invertGroupDirection) {\r\n      const vGkey = this.vGroupKey;\r\n      const hGkey = this.hGroupKey;\r\n\r\n      this.hGroupKey = vGkey;\r\n      this.vGroupKey = hGkey;\r\n    }\r\n\r\n    this.hHeadings = (this.hGroupKeys.length > 0 ? this.hGroupKeys : this.getHeadings(this.hGroupKey));\r\n    this.vHeadings = (this.vGroupKeys.length > 0 ? this.vGroupKeys : this.getHeadings(this.vGroupKey));\r\n\r\n    this.collapseStates.push(...this.vHeadings.map(item => ({ name: item, collapsed: this.vCollapsed })));\r\n    this.collapseStates.push(...this.hHeadings.map(item => ({ name: item, collapsed: this.hCollapsed })));\r\n\r\n    this.taskboardService.filterChanged$.subscribe(filter => this.filter = filter);\r\n\r\n    // this.calculateScrollBarWidth();\r\n  }\r\n\r\n  getItemsOfGroup(vValue: string, hValue: string): Array<CardItem> | Array<object> {\r\n    // console.log('getItemsOfGroup', arguments);\r\n    let items = this.items.filter(item => {\r\n\r\n      if (this.taskboardService.objectProperties.length === 0) {\r\n        this.taskboardService.objectProperties = Object.keys(item);\r\n      }\r\n      const groupKeys: GroupKeys = this.determineCorrectGroupKeys(item);\r\n\r\n      const vItem = item[groupKeys.vGroupKey];\r\n      const hItem = item[groupKeys.hGroupKey];\r\n\r\n      if (hItem == undefined || hItem == null && vItem === undefined || vItem == null) {\r\n        return false;\r\n      }\r\n\r\n      return vItem.toLowerCase() === vValue.toLowerCase() &&\r\n        hItem.toLowerCase() === hValue.toLowerCase();\r\n    });\r\n\r\n    if (this.showUngroupedInBacklog) {\r\n      items = items.filter(item => item[this.vGroupKey] !== '' && item[this.hGroupKey] !== '');\r\n    }\r\n\r\n    if (this.sortBy !== '') {\r\n      /* Detect datatype of sortBy-Field */\r\n      const fieldType = typeof (items.some(item => items[0][this.sortBy] !== undefined && items[0][this.sortBy] !== null)[this.sortBy]);\r\n      if (fieldType) {\r\n        items = items.sort((a, b) => {\r\n\r\n          const aField = a[this.sortBy];\r\n          const bField = b[this.sortBy];\r\n\r\n          if (fieldType === 'number') {\r\n            return bField - aField;\r\n          }\r\n\r\n          if (fieldType === 'string') {\r\n            if (aField < bField) {\r\n              return -1;\r\n            }\r\n            if (aField > bField) {\r\n              return 1;\r\n            }\r\n\r\n            return 0;\r\n          }\r\n\r\n        });\r\n      }\r\n    }\r\n    return (this.filter != '') ? items.filter((item, index, array) => {\r\n      return (this.filterOnProperties.length > 0 ? this.filterOnProperties : Object.keys(item)).some(key => {\r\n        const found = item[key] != undefined && typeof (item[key]) != 'number' && ((item[key] as string).indexOf(this.filter) > -1 ? true : false);\r\n        found && console.info(`Searching \"${item[key]}\" for \"${this.filter}\" | Found ${found}`);\r\n        return found;\r\n      });\r\n    }) : items;\r\n  }\r\n\r\n  toggleCollapseGroup(direction: string, collapsed: boolean): void {\r\n    const groupKeysToToggle =\r\n      this.collapseStates.filter(item => (direction === 'vertical' ? this.vHeadings : this.hHeadings)\r\n        .some(i => i.toLowerCase() == item.name.toLowerCase()));\r\n\r\n    groupKeysToToggle.forEach(item => item.collapsed = !collapsed);\r\n    if (groupKeysToToggle.length > 0) {\r\n      if (direction == 'vertical') {\r\n        this.vCollapsed = !collapsed;\r\n      } else {\r\n        this.hCollapsed = !collapsed;\r\n      }\r\n    }\r\n  }\r\n\r\n  determineCorrectGroupKeys(item: object): GroupKeys {\r\n    return {\r\n      hGroupKey: this.getCaseInsensitivePropKey(this.items[0], this.hGroupKey),\r\n      vGroupKey: this.getCaseInsensitivePropKey(this.items[0], this.vGroupKey)\r\n    };\r\n  }\r\n\r\n  getCaseInsensitivePropKey(item: object, propKey: string): string {\r\n    if (item) {\r\n      return Object.keys(item).find(\r\n        key => (key != '' && key != null && key != undefined)\r\n          ? key.toLowerCase() === propKey.toLowerCase()\r\n          : false\r\n      );\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  getHeadings(groupKey: string = this.vGroupKey): Array<string> {\r\n    const keys = (this.items as Array<object>).map((item: any) =>\r\n      item[Object.keys(item).find(key => key.toLowerCase() === groupKey.toLowerCase())]\r\n    );\r\n\r\n\r\n    return keys.filter((elem, pos, arr) => {\r\n      return arr.indexOf(elem) === pos && (this.showUngroupedInBacklog && (elem !== '' && elem != null));\r\n    });\r\n  }\r\n\r\n  getUngroupedItems(): Array<CardItem> | Array<object> {\r\n    if (this.showUngroupedInBacklog) {\r\n      return this.items.filter(item => {\r\n        const groupKeys: GroupKeys = this.determineCorrectGroupKeys(item);\r\n        const isUngrouped =\r\n          (item[groupKeys.vGroupKey] === '' && item[groupKeys.hGroupKey] === '')\r\n          ||\r\n          (item[groupKeys.vGroupKey] === null && item[groupKeys.hGroupKey] === null);\r\n        return isUngrouped;\r\n      });\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  toggleCollapse(group: { hGroup: string, vGroup: string }): void {\r\n\r\n    const part = group.hGroup || group.vGroup;\r\n\r\n    const collapseState = this.collapseState(part);\r\n    this.collapseStates.find(item => item.name === part).collapsed = !collapseState;\r\n    // console.log(\"Toggle: \"+part);\r\n  }\r\n\r\n  collapseState(part: string): boolean {\r\n    return this.collapseStates.find(item => item.name === part).collapsed;\r\n  }\r\n\r\n  public dragStart(event: DragEvent, item: CardItem) {\r\n    this.dragItem = item;\r\n    this.dragStarted.emit(this.dragItem);\r\n  }\r\n\r\n  public dragEnd(event: DragEvent, item: CardItem) {\r\n    this.dragItem = undefined;\r\n\r\n  }\r\n\r\n  createElement(group: ClickEvent) {\r\n    this.elementCreateClick.emit(group);\r\n  }\r\n\r\n  public drop(event: DragEvent, vRow: string, hRow: string) {\r\n    event.preventDefault();\r\n    if (event.currentTarget) {\r\n      const placeholderEl = (event.currentTarget as HTMLElement).querySelector('.placeholder');\r\n      if (placeholderEl) {\r\n        this.renderer.removeChild(placeholderEl.parentNode, placeholderEl);\r\n      }\r\n      this.currentDragZone = '';\r\n      this.placeholderSet = false;\r\n    }\r\n\r\n    const groupKeys: GroupKeys = this.determineCorrectGroupKeys(this.dragItem);\r\n\r\n    this.dragItem[groupKeys.vGroupKey] = vRow;\r\n    this.dragItem[groupKeys.hGroupKey] = hRow;\r\n\r\n    this.dropped.emit(this.dragItem);\r\n    this.dragItem = undefined;\r\n  }\r\n\r\n  public dragOver(event: DragEvent, vRow: string, hRow: string) {\r\n    if (this.dragItem) {\r\n      event.preventDefault();\r\n\r\n      if (vRow == undefined) {\r\n        vRow = '';\r\n      }\r\n\r\n      if (hRow == undefined) {\r\n        hRow = '';\r\n      }\r\n\r\n      const dragZone = `${vRow}-${hRow.replace(' ', '')}`.toLowerCase();\r\n      if (dragZone !== this.currentDragZone && this.currentDragZone !== '') {\r\n        const lastPlaceholder = document.getElementById(this.currentDragZone);\r\n        if (lastPlaceholder) {\r\n          this.renderer.removeChild(lastPlaceholder.parentNode, lastPlaceholder);\r\n          this.placeholderSet = false;\r\n        }\r\n      }\r\n\r\n      this.currentDragZone = `${vRow}-${hRow.replace(' ', '')}`.toLowerCase();\r\n\r\n      if (!this.placeholderSet) {\r\n        const placeholderElement = this.createPlaceholderElement(this.currentDragZone);\r\n        this.renderer.appendChild(event.currentTarget, placeholderElement);\r\n        this.placeholderSet = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  scrollBarStyle(): object {\r\n\r\n    return {\r\n      'padding-right': `${this.calculateScrollBarWidth()}px`\r\n    };\r\n  }\r\n\r\n  getColumnWidth(): object {\r\n    if (!this.scrollable) { return {}; }\r\n\r\n    return {\r\n      'min-width': `${this.columnWidth}px`\r\n    };\r\n  }\r\n\r\n  calculateScrollBarWidth(): number {\r\n    const headingsRowWidth = this.elRef.nativeElement.querySelector('.headings').clientWidth;\r\n    const contentWidth = this.elRef.nativeElement.querySelector('.row-content').clientWidth;\r\n    return headingsRowWidth - contentWidth;\r\n  }\r\n\r\n  createPlaceholderElement(id: string): HTMLElement {\r\n    if (this.dragoverPlaceholderTemplate) {\r\n      return this.dragoverPlaceholderTemplate.elementRef.nativeElement.cloneNode(true);\r\n    } else {\r\n      const placeholderElement: HTMLElement = this.renderer.createElement('div');\r\n      this.renderer.setStyle(placeholderElement, 'border', '1px dashed gray');\r\n      this.renderer.setStyle(placeholderElement, 'width', '100%');\r\n      this.renderer.setStyle(placeholderElement, 'height', '50px');\r\n      this.renderer.setAttribute(placeholderElement, 'id', this.currentDragZone);\r\n      this.renderer.setAttribute(placeholderElement, 'class', 'placeholder');\r\n\r\n      return placeholderElement;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"node_modules/bootstrap/scss/bootstrap\";\r\n\r\n:host {\r\n  .overflow-hidden {\r\n    overflow: hidden;\r\n  }\r\n\r\n  .overflow-scroll {\r\n    overflow: scroll;\r\n  }\r\n}\r\n\r\n.card-header-bg {\r\n  background-color: #f7f7f7;\r\n}\r\n",
                    "styleUrl": "./board.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "taskboardService",
                        "type": "TaskboardService"
                    }
                ],
                "line": 145,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskboardService",
                        "type": "TaskboardService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"h-100 d-flex flex-column align-items-stretch border-0\" [class.small]=\"smallText\" style=\"overflow: hidden\">\r\n  <div class=\"d-flex flex-column h-100\">\r\n    <ngx-taskboard-filter-search-bar [placeholder]=\"filterRowPlaceholder\"></ngx-taskboard-filter-search-bar>\r\n    <div class=\"d-flex flex-row align-items-stretch flex-fill h-100 \">\r\n\r\n      <div class=\"backlog border-right\" *ngIf=\"showBacklog\">\r\n        <div class=\"card border-right-0 border-top-0 border-left-0 w-100 h-100\">\r\n          <div class=\"{{hHeaderClass}} d-flex flex-row justify-content-between\">\r\n            {{ backlogName }}\r\n            <div class=\"actions ml-3\">\r\n              <fa-icon [icon]=\"['fas','plus-square']\" [fixedWidth]=\"true\"></fa-icon>\r\n              <fa-icon [icon]=\"['fas','chevron-left']\" [fixedWidth]=\"true\"></fa-icon>\r\n            </div>\r\n          </div>\r\n          <ul class=\"list-group list-group-flush p-3 h-100\" (dragover)=\"dragOver($event, null, null)\"\r\n            (drop)=\"drop($event, null, null)\">\r\n            <div class=\" ungrouped-item\" *ngFor=\"let item of getUngroupedItems()\" draggable=\"true\"\r\n              (dragstart)=\"dragStart($event, item)\" (dragend)=\"dragEnd($event, item)\">\r\n              <ng-container *ngIf=\"itemTemplate\">\r\n                <ng-container *ngTemplateOutlet=\"itemTemplate; context { item: item }\"></ng-container>\r\n              </ng-container>\r\n\r\n              <ng-container *ngIf=\"!itemTemplate\">\r\n                <div class=\"card mb-1 border-bottom-0 border-top-0\" style=\"border-left: 5px solid; border-radius: 0;\"\r\n                  [style.border-left-color]=\"item?.color\">\r\n                  <div class=\"card-header border-top d-flex flex-row justify-content-between\">\r\n                    <div class=\"\">\r\n                      <span class=\"font-weight-bold\">\r\n                        #{{item.id}}\r\n                      </span>\r\n                      <span class=\"ml-3\">{{ item.name }}</span>\r\n                      <span class=\"ml-3\">{{ item.priority }}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </ng-container>\r\n            </div>\r\n          </ul>\r\n        </div>\r\n\r\n      </div>\r\n      <div class=\"column-cards d-flex flex-column flex-fill h-100\" [class.overflow-auto]=\"scrollable\">\r\n\r\n        <div class=\"headings d-flex flex-row align-items-stretch w-100\" [ngStyle]=\"scrollBarStyle()\"\r\n          [class.sticky-top]=\"stickyHorizontalHeaderKeys && scrollable\">\r\n          <div class=\"col-2 border-left {{hHeaderClass}} border-left-0 d-flex flex-row\" *ngIf=\"vGroupKey\">\r\n            <div class=\"d-flex flex-row w-100\">\r\n              <div class=\"boardname flex-fill\">{{ boardName }}</div>\r\n              <div class=\"h-v-actions align-self-center\">\r\n                <fa-icon [icon]=\"['fas', vCollapsed ? 'chevron-down' : 'chevron-up']\" [fixedWidth]=\"true\"\r\n                  (click)=\"toggleCollapseGroup('vertical', vCollapsed)\"></fa-icon>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"border-left {{hHeaderClass}} d-flex flex-row justify-content-between horizontal-group-header\"\r\n            [class.bg-white]=\"collapseState(group)\" [class.border-bottom-0]=\"collapseState(group)\"\r\n            [class.col]=\"!collapseState(group) && !scrollable\" *ngFor=\"let group of hHeadings\"\r\n            [class.h-collapsed]=\"collapseState(group)\" [ngStyle]=\"getColumnWidth()\">\r\n            <div class=\"\" *ngIf=\"!collapseState(group)\">\r\n              <ng-container [ngIf]=\"hHeaderTemplate\" *ngTemplateOutlet=\"hHeaderTemplate; context: { groupName: group }\">\r\n              </ng-container>\r\n              <ng-container *ngIf=\"!hHeaderTemplate\">\r\n                {{ group || 'Ungrouped'}}\r\n              </ng-container>\r\n            </div>\r\n            <div *ngIf=\"!collapseState(group)\">\r\n              <ng-content\r\n                *ngTemplateOutlet=\"cardAction; context: { withNew: hAddNewItems, group: { hGroup: group, vGroup: null}, collapser: false, chevronIcon: !collapseState(group) ? 'chevron-left' : 'chevron-right' }\">\r\n              </ng-content>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div class=\"d-flex flex-column row-content align-items-stretch\" [class.flex-fill]=\"!scrollable\">\r\n\r\n          <div class=\"d-flex flex-row\" [class.flex-fill]=\"!collapseState(vGroup)\" *ngFor=\"let vGroup of vHeadings\">\r\n\r\n            <div class=\"col-2 {{vHeaderClass}} border-left-0 d-flex flex-row justify-content-between\" *ngIf=\"vGroupKey\">\r\n              <div class=\"vertical-group-header h-100 border-bottom-0 border-left-0 p-0 m-0 flex-fill\">\r\n\r\n                <ng-container [ngIf]=\"vHeaderTemplate\"\r\n                  *ngTemplateOutlet=\"vHeaderTemplate; context: { groupName: vGroup }\">\r\n                </ng-container>\r\n                <ng-container *ngIf=\"!vHeaderTemplate\">\r\n                  {{ vGroup || 'Ungrouped' }}\r\n                </ng-container>\r\n              </div>\r\n\r\n              <div class=\"vertical-actions d-flex flex-column\" [class.flex-column]=\"!collapseState(vGroup)\"\r\n                [class.flex-row]=\"collapseState(vGroup)\" [class.flex-row-reverse]=\"collapseState(vGroup)\">\r\n                <div class=\"align-self-start flex-fill\">\r\n                  <ng-content\r\n                    *ngTemplateOutlet=\"cardAction; context: { withNew: false, group: { hGroup: null, vGroup: vGroup}, collapser: true, chevronIcon: !collapseState(vGroup) ? 'chevron-up' : 'chevron-down'  }\">\r\n                  </ng-content>\r\n                </div>\r\n                <div class=\"align-self-start\">\r\n                  <ng-content class=\"align-self-end\"\r\n                    *ngTemplateOutlet=\"cardAction; context: { withNew: vAddNewItems, group: { hGroup: null, vGroup: vGroup}, collapser: false }\">\r\n                  </ng-content>\r\n                </div>\r\n              </div>\r\n\r\n            </div>\r\n\r\n            <ng-container *ngFor=\"let hGroup of hHeadings\">\r\n              <div class=\"cell-item border-left {{cellClass}} bg-white d-flex flex-column\"\r\n                [class.col]=\"!collapseState(hGroup) && !scrollable\" [class.border-bottom-0]=\"collapseState(hGroup)\"\r\n                [class.v-collapsed]=\"collapseState(vGroup)\" [class.h-collapsed]=\"collapseState(hGroup)\"\r\n                [ngStyle]=\"getColumnWidth()\">\r\n                <ng-container *ngIf=\"!collapseState(vGroup) && !collapseState(hGroup)\">\r\n\r\n                  <div class=\"cell-items flex-fill\" (dragover)=\"dragOver($event, vGroup, hGroup)\"\r\n                    (drop)=\"drop($event, vGroup, hGroup)\">\r\n                    <ng-container *ngFor=\"let item of getItemsOfGroup(vGroup, hGroup)\">\r\n\r\n                      <div class=\"item-container p-0 m-0\" draggable=\"true\" (dragstart)=\"dragStart($event, item)\"\r\n                        (dragend)=\"dragEnd($event, item)\">\r\n                        <!-- Items -->\r\n                        <ng-container *ngIf=\"itemTemplate\">\r\n                          <ng-container *ngTemplateOutlet=\"itemTemplate; context { item: item }\"></ng-container>\r\n                        </ng-container>\r\n\r\n                        <ng-container *ngIf=\"!itemTemplate\">\r\n                          <div class=\"card mb-1 border-bottom-0 border-top-0\"\r\n                            style=\"border-left: 5px solid; border-radius: 0;\" [style.border-left-color]=\"item?.color\">\r\n                            <div class=\"card-header border-top d-flex flex-row justify-content-between\">\r\n                              <div class=\"\">\r\n                                <span class=\"font-weight-bold\">#{{item.id}}</span>\r\n                                <span class=\"ml-3\">{{ item.name }}</span>\r\n                                <span class=\"ml-3\">{{ item.priority }}</span>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </ng-container>\r\n                      </div>\r\n\r\n                    </ng-container>\r\n\r\n                    <!-- <ng-container *ngIf=\"getItemsOfGroup(vGroup, hGroup).length == 0\">\r\n                      <div class=\"card mb-1 border-bottom-0 border-top-0\"\r\n                        style=\"border-left: 5px solid; border-radius: 0;\">\r\n                        <div class=\"card-header border-top d-flex flex-row justify-content-between\">\r\n  \r\n                        </div>\r\n                      </div>\r\n                    </ng-container> -->\r\n\r\n                  </div>\r\n                  <div class=\"cell-actions d-flex flex-row align-self-end\">\r\n                    <ng-content\r\n                      *ngTemplateOutlet=\"cardAction; context: { withNew: cellAddNewItems, group: { hGroup: hGroup, vGroup: vGroup}, collapser: false }\">\r\n                    </ng-content>\r\n                  </div>\r\n\r\n                </ng-container>\r\n                <ng-container *ngIf=\"collapseState(vGroup) && !collapseState(hGroup)\">\r\n                  <div class=\"text-center\" (dragover)=\"dragOver($event, vGroup, hGroup)\"\r\n                    (drop)=\"drop($event, vGroup, hGroup)\">\r\n                    <ng-container [ngIf]=\"noElementsTemplate\"\r\n                      *ngTemplateOutlet=\"noElementsTemplate; context: { count: getItemsOfGroup(vGroup, hGroup).length, filter: this.filter }\">\r\n                    </ng-container>\r\n                    <ng-container *ngIf=\"!noElementsTemplate\">\r\n                      {{ getItemsOfGroup(vGroup, hGroup).length }} elements\r\n                      <span *ngIf=\"filter !== ''\" class=\"code\"> (filtered by <code>{{filter}}</code>)</span>\r\n                    </ng-container>\r\n                  </div>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"collapseState(hGroup)\">\r\n\r\n                </ng-container>\r\n                <!-- {{ collapseState(hGroup) }} / {{ collapseState(vGroup) }} -->\r\n\r\n              </div>\r\n            </ng-container>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n</div>\r\n\r\n<ng-template #cardAction let-withNew=\"withNew\" let-group=\"group\" let-chevronIcon=\"chevronIcon\"\r\n  let-collapser=\"collapser\">\r\n\r\n  <ng-container [ngIf]=\"actionsTemplate\"\r\n    *ngTemplateOutlet=\"actionsTemplate; context: { actionConfig: { group: group, chevronIcon: chevronIcon, collapser: collapser  }  }\">\r\n  </ng-container>\r\n  <ng-container *ngIf=\"!actionsTemplate\">\r\n    <div class=\"actions ml-3\" *ngIf=\"vGroupKey\">\r\n      <fa-icon [icon]=\"['fas','plus-square']\" [fixedWidth]=\"true\" *ngIf=\"withNew\" (click)=\"createElement(group)\">\r\n      </fa-icon>\r\n      <fa-icon [icon]=\"['fas',chevronIcon ? chevronIcon : 'chevron-left']\" [fixedWidth]=\"true\"\r\n        (click)=\"toggleCollapse(group)\" *ngIf=\"(collapser != null ? collapser : true)\"></fa-icon>\r\n    </div>\r\n  </ng-container>\r\n\r\n\r\n</ng-template>"
        },
        {
            "name": "FilterSearchBarComponent",
            "id": "component-FilterSearchBarComponent-de3866714b8e16c8474c509443771b03",
            "file": "projects/ngx-taskboard-lib/src/lib/filter-search-bar/filter-search-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngx-taskboard-filter-search-bar",
            "styleUrls": [
                "./filter-search-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./filter-search-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "placeholder",
                    "defaultValue": "\"Search for Items\"",
                    "line": 19
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "filter",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "filterChanged",
                    "defaultValue": "new Subject<string>()",
                    "type": "Subject<string>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "filterOnProperties",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "filterOnPropertiesChanged",
                    "defaultValue": "new EventEmitter<string[]>()",
                    "type": "EventEmitter<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "taskboardService",
                    "type": "TaskboardService",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changed",
                    "args": [
                        {
                            "name": "text",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit } from \"@angular/core\";\r\nimport { Subject } from \"rxjs\";\r\nimport { debounceTime, distinctUntilChanged } from \"rxjs/operators\";\r\nimport { TaskboardService } from \"../taskboard.service\";\r\n\r\n@Component({\r\n  // tslint:disable-next-line: component-selector\r\n  selector: \"ngx-taskboard-filter-search-bar\",\r\n  templateUrl: \"./filter-search-bar.component.html\",\r\n  styleUrls: [\"./filter-search-bar.component.scss\"],\r\n})\r\nexport class FilterSearchBarComponent implements OnInit {\r\n\r\n  public filter: string;\r\n  public filterChanged: Subject<string> = new Subject<string>();\r\n  public filterOnProperties: string[] = [];\r\n  public filterOnPropertiesChanged: EventEmitter<string[]> = new EventEmitter<string[]>();\r\n\r\n  @Input() public placeholder = \"Search for Items\";\r\n\r\n  constructor(public taskboardService: TaskboardService) {\r\n    this.filterChanged.pipe(\r\n      debounceTime(300),\r\n      distinctUntilChanged())\r\n      .subscribe((filter: string) => {\r\n        this.filter = filter;\r\n        this.taskboardService.filterChanged$.emit(filter);\r\n      });\r\n  }\r\n\r\n  public ngOnInit() {\r\n  }\r\n\r\n  public changed(text) {\r\n    this.filterChanged.next(text);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./filter-search-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "taskboardService",
                        "type": "TaskboardService"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "taskboardService",
                        "type": "TaskboardService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card-header\">\r\n  <div class=\"input-group\">\r\n    <div class=\"input-group-prepend\">\r\n      <span class=\"input-group-text bg-white\" id=\"basic-addon1\">\r\n        <fa-icon [icon]=\"['fas','search']\"></fa-icon>\r\n      </span>\r\n    </div>\r\n    <input type=\"text\" *ngIf=\"taskboardService.objectProperties.length > 0\" class=\"form-control border-left-0 pl-0\"\r\n      [typeahead]=\"taskboardService.objectProperties\" placeholder=\"{{placeholder}}\" [ngModel]='filter'\r\n      (ngModelChange)=\"changed($event)\" />\r\n\r\n    <!-- <div class=\"input-group-append\">\r\n        <div class=\"btn-group\" dropdown>\r\n            <button id=\"button-basic\" dropdownToggle type=\"button\" class=\"btn btn-primary dropdown-toggle\"\r\n                    aria-controls=\"dropdown-basic\">\r\n              Button dropdown <span class=\"caret\"></span>\r\n            </button>\r\n            <ul id=\"dropdown-basic\" *dropdownMenu class=\"dropdown-menu\"\r\n                role=\"menu\" aria-labelledby=\"button-basic\">\r\n              <li role=\"menuitem\"><a class=\"dropdown-item\" href=\"#\">Action</a></li>\r\n              <li role=\"menuitem\"><a class=\"dropdown-item\" href=\"#\">Another action</a></li>\r\n              <li role=\"menuitem\"><a class=\"dropdown-item\" href=\"#\">Something else here</a></li>\r\n              <li class=\"divider dropdown-divider\"></li>\r\n              <li role=\"menuitem\"><a class=\"dropdown-item\" href=\"#\">Separated link</a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n    </div> -->\r\n  </div>\r\n</div>"
        }
    ],
    "modules": [
        {
            "name": "NgxTaskboardModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "TaskboardService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BoardComponent"
                        },
                        {
                            "name": "FilterSearchBarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BoardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": [],
    "routes": [],
    "coverage": {
        "count": 24,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ngx-taskboard-lib/src/lib/board/board.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardComponent",
                "coveragePercent": 59,
                "coverageCount": "38/64",
                "status": "good"
            },
            {
                "filePath": "projects/ngx-taskboard-lib/src/lib/filter-search-bar/filter-search-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FilterSearchBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-taskboard-lib/src/lib/taskboard.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskboardService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-taskboard-lib/src/lib/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CardItem",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-taskboard-lib/src/lib/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClickEvent",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "projects/ngx-taskboard-lib/src/lib/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CollapseState",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "projects/ngx-taskboard-lib/src/lib/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GroupKeys",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            }
        ]
    }
}